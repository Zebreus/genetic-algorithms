### Basic Initialization settings
    # Variant used for the encoding [NESW | FRL]
        encodingVariant = NESW
    # Seed for the random number generator, [-1] for System.nanoTime()
        seed = -1


### Algorithm settings
    # Size of the population in one generation
        populationSize = 1000
    # Number of generations to run the algorithm for
        noGenerations = 10000
    # Type of population initialization [curl | straight | random]
        initializationMethod = random
    # Type of selection that should be used [proportional | tournament | onlybest]
        selectionMethod = tournament
    # Number of tournament participants, only relevant when selection is set to tournament
        k = 5
    # Type(s) of mutators to use in the algorithm, separated by comma [singlePoint / crossover / singlePointGlobal]
        mutatorMethods = singlePoint,crossover
    # Points each HH bond gives
        pointsPerBond = 1


### Mutation settings
    # How often a single point mutation should be attempted per candidate
        mutationAttemptsPerCandidate = 100
    # Chance for a successful single point mutation [1.0 = 100%]
        mutationChance = 0.011
    # The mutation chance cannot drop below this value [1.0 = 100%]
        mutationMinimalChance = 0.01
    # Multiplicand for mutation probability with each generation -> ex with 0.05: 1st 1.0, 2nd 0.95, 3rd 0.9025, 4th 0.857
        mutationMultiplier = 0.0
    # How often a crossover should be attempted per candidate
        crossoverAttemptsPerCandidate = 1
    # Chance for a successful crossover [1.0 = 100%]
        crossoverChance = 0.051
    # The crossover chance cannot drop below this value [1.0 = 100%]
        crossoverMinimalChance = 0.05
    # Multiplicand for mutation probability with each generation -> ex with -0.05: 1st 1.0, 2nd 1.05, 3rd 1,1025, 4th 1,157
        crossoverMultiplier = 0.0


### Output settings
    # Type(s) of visualization to enable, separated with comma [console / image / video / log / generation]
    # console = Print best candidate of each generation to stdout
    # image = Save best candidate of each generation as image
    # video = Generate a video from the created images. Requires image
    # log = Generate tab seperated file with a bit of information about each generation
    # generation = print a short overview about each generation to stdout
        visualizerType = generation,image
    # Name of the job, filenames will be based on this name. If left empty a timestamp is used
        jobName =
    # Directory for the image sequence
        imageSequenceDirectory = visualization/series
    # Directory for the resulting video file
        videoDirectory = visualization
    # Directory for the log file, always active
        logfileDirectory = log
    # Interval of generations between rendered images
        imageInterval = 100
    # Frames per second in the beginning of the video
        imgFps = 10
    # Number of images until fps increases by one
        imagesToFpsIncrease = 10
    # Maximum fps, a larger gap between the starting and maxFps will mean a longer encoding and file size
        imgFpsMax = 40
    # Zoom to the appropriate size, once no bigger proteins are going to follow
        zoom = true
